"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "(pages-dir-browser)/./src/store/slices/authSlice.js":
/*!***************************************!*\
  !*** ./src/store/slices/authSlice.js ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearCredentials: () => (/* binding */ clearCredentials),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   login: () => (/* binding */ login),\n/* harmony export */   logout: () => (/* binding */ logout),\n/* harmony export */   refreshAccessToken: () => (/* binding */ refreshAccessToken),\n/* harmony export */   register: () => (/* binding */ register),\n/* harmony export */   resetAuthState: () => (/* binding */ resetAuthState),\n/* harmony export */   selectAuthError: () => (/* binding */ selectAuthError),\n/* harmony export */   selectAuthLoading: () => (/* binding */ selectAuthLoading),\n/* harmony export */   selectAuthToken: () => (/* binding */ selectAuthToken),\n/* harmony export */   selectCurrentUser: () => (/* binding */ selectCurrentUser),\n/* harmony export */   selectIsAuthenticated: () => (/* binding */ selectIsAuthenticated),\n/* harmony export */   setCredentials: () => (/* binding */ setCredentials),\n/* harmony export */   verifyMFA: () => (/* binding */ verifyMFA)\n/* harmony export */ });\n/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @reduxjs/toolkit */ \"(pages-dir-browser)/../../node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs\");\n/* harmony import */ var _services_authService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/authService */ \"(pages-dir-browser)/./src/services/authService.js\");\n/* harmony import */ var _lib_utils_secureStorage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/utils/secureStorage */ \"(pages-dir-browser)/./src/lib/utils/secureStorage.js\");\n/* harmony import */ var _config_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../config/constants */ \"(pages-dir-browser)/./src/config/constants.js\");\n\n\n\n\n// Define initial state\nconst initialState = {\n    user: null,\n    token: null,\n    refreshToken: null,\n    isAuthenticated: false,\n    isLoading: false,\n    error: null,\n    mfaRequired: false,\n    mfaToken: null\n};\n// Async thunks\nconst login = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_3__.createAsyncThunk)('auth/login', async (credentials, param)=>{\n    let { rejectWithValue } = param;\n    try {\n        const response = await _services_authService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].login(credentials);\n        // Check if MFA is required\n        if (response.requireMFA) {\n            // For MFA flow, we don't store the tokens yet\n            // We just return the response with the MFA token\n            // Add partial login to history\n            _lib_utils_secureStorage__WEBPACK_IMPORTED_MODULE_1__.secureStorage.addLoginToHistory({\n                id: Date.now().toString(),\n                device: navigator.userAgent,\n                location: 'Unknown',\n                status: 'pending_mfa'\n            });\n            return {\n                requireMFA: true,\n                mfaToken: response.mfaToken,\n                email: credentials.email,\n                rememberMe: credentials.rememberMe\n            };\n        }\n        // No MFA required, proceed with normal login flow\n        // Store tokens and user data in secure storage\n        _lib_utils_secureStorage__WEBPACK_IMPORTED_MODULE_1__.secureStorage.setAuthTokens({\n            token: response.token,\n            refreshToken: response.refreshToken\n        }, credentials.rememberMe);\n        _lib_utils_secureStorage__WEBPACK_IMPORTED_MODULE_1__.secureStorage.setUserData(response.user, credentials.rememberMe);\n        // Add login to history\n        _lib_utils_secureStorage__WEBPACK_IMPORTED_MODULE_1__.secureStorage.addLoginToHistory({\n            id: Date.now().toString(),\n            device: navigator.userAgent,\n            location: 'Unknown',\n            status: 'success'\n        });\n        return response;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        // Add failed login to history\n        _lib_utils_secureStorage__WEBPACK_IMPORTED_MODULE_1__.secureStorage.addLoginToHistory({\n            id: Date.now().toString(),\n            device: navigator.userAgent,\n            location: 'Unknown',\n            status: 'failed'\n        });\n        return rejectWithValue(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || 'Login failed');\n    }\n});\nconst register = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_3__.createAsyncThunk)('auth/register', async (userData, param)=>{\n    let { rejectWithValue } = param;\n    try {\n        const response = await _services_authService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].register(userData);\n        // Store tokens and user data in secure storage\n        _lib_utils_secureStorage__WEBPACK_IMPORTED_MODULE_1__.secureStorage.setAuthTokens({\n            token: response.token,\n            refreshToken: response.refreshToken\n        }, true); // Always remember new registrations\n        _lib_utils_secureStorage__WEBPACK_IMPORTED_MODULE_1__.secureStorage.setUserData(response.user, true);\n        // Add login to history\n        _lib_utils_secureStorage__WEBPACK_IMPORTED_MODULE_1__.secureStorage.addLoginToHistory({\n            id: Date.now().toString(),\n            device: navigator.userAgent,\n            location: 'Unknown',\n            status: 'success'\n        });\n        return response;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        return rejectWithValue(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || 'Registration failed');\n    }\n});\nconst logout = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_3__.createAsyncThunk)('auth/logout', async (_, param)=>{\n    let { rejectWithValue } = param;\n    try {\n        // Get tokens before clearing storage\n        const tokens = _lib_utils_secureStorage__WEBPACK_IMPORTED_MODULE_1__.secureStorage.getAuthTokens();\n        // Clear secure storage first\n        _lib_utils_secureStorage__WEBPACK_IMPORTED_MODULE_1__.secureStorage.clearAuthStorage();\n        // Only call API if we have a token\n        if (tokens === null || tokens === void 0 ? void 0 : tokens.token) {\n            try {\n                await _services_authService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].logout();\n            } catch (logoutError) {\n                // Even if the server-side logout fails, we still want to clear the client-side state\n                console.error('Server logout failed, but client logout succeeded', logoutError);\n            }\n        }\n        // Clear any cached API responses\n        if (true) {\n            // Clear any application cache\n            const cacheKeys = Object.keys(localStorage).filter((key)=>key.startsWith('cache-'));\n            cacheKeys.forEach((key)=>localStorage.removeItem(key));\n            // Clear any service worker caches if needed\n            if ('caches' in window) {\n                try {\n                    caches.keys().then((names)=>{\n                        names.forEach((name)=>{\n                            caches.delete(name);\n                        });\n                    });\n                } catch (e) {\n                    console.error('Error clearing caches:', e);\n                }\n            }\n        }\n        return null;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        // Even if there's an error, we still want to clear the client-side state\n        _lib_utils_secureStorage__WEBPACK_IMPORTED_MODULE_1__.secureStorage.clearAuthStorage();\n        return rejectWithValue(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || 'Logout failed');\n    }\n});\nconst verifyMFA = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_3__.createAsyncThunk)('auth/verifyMFA', async (param, param1)=>{\n    let { mfaToken, code, email, rememberMe, isBackupCode = false } = param, { rejectWithValue } = param1;\n    try {\n        // Call the API to verify the MFA code\n        const response = await _services_authService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].verifyMFALogin({\n            mfaToken,\n            code,\n            isBackupCode\n        });\n        // If verification is successful, store tokens and user data\n        _lib_utils_secureStorage__WEBPACK_IMPORTED_MODULE_1__.secureStorage.setAuthTokens({\n            token: response.token,\n            refreshToken: response.refreshToken\n        }, rememberMe);\n        _lib_utils_secureStorage__WEBPACK_IMPORTED_MODULE_1__.secureStorage.setUserData(response.user, rememberMe);\n        // Update login history\n        _lib_utils_secureStorage__WEBPACK_IMPORTED_MODULE_1__.secureStorage.addLoginToHistory({\n            id: Date.now().toString(),\n            device: navigator.userAgent,\n            location: 'Unknown',\n            status: 'success_mfa'\n        });\n        return response;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        // Add failed MFA verification to history\n        _lib_utils_secureStorage__WEBPACK_IMPORTED_MODULE_1__.secureStorage.addLoginToHistory({\n            id: Date.now().toString(),\n            device: navigator.userAgent,\n            location: 'Unknown',\n            status: 'failed_mfa'\n        });\n        return rejectWithValue(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || 'MFA verification failed');\n    }\n});\nconst refreshAccessToken = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_3__.createAsyncThunk)('auth/refreshToken', async (_, param)=>{\n    let { rejectWithValue } = param;\n    try {\n        // Get refresh token from secure storage\n        const tokens = _lib_utils_secureStorage__WEBPACK_IMPORTED_MODULE_1__.secureStorage.getAuthTokens();\n        if (!(tokens === null || tokens === void 0 ? void 0 : tokens.refreshToken)) {\n            return rejectWithValue('No refresh token available');\n        }\n        const response = await _services_authService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].refreshToken(tokens.refreshToken);\n        // Update tokens in secure storage\n        _lib_utils_secureStorage__WEBPACK_IMPORTED_MODULE_1__.secureStorage.setAuthTokens({\n            token: response.token,\n            refreshToken: response.refreshToken\n        });\n        return response;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        // If refresh fails, clear auth storage\n        _lib_utils_secureStorage__WEBPACK_IMPORTED_MODULE_1__.secureStorage.clearAuthStorage();\n        return rejectWithValue(((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || 'Token refresh failed');\n    }\n});\n// Helper function to initialize state from secure storage\nconst initializeAuthState = ()=>{\n    // Check if we're in a browser environment\n    if (true) {\n        try {\n            const tokens = _lib_utils_secureStorage__WEBPACK_IMPORTED_MODULE_1__.secureStorage.getAuthTokens();\n            const userData = _lib_utils_secureStorage__WEBPACK_IMPORTED_MODULE_1__.secureStorage.getUserData();\n            if (tokens && userData) {\n                return {\n                    ...initialState,\n                    user: userData,\n                    token: tokens.token,\n                    refreshToken: tokens.refreshToken,\n                    isAuthenticated: true\n                };\n            }\n        } catch (error) {\n            console.error('Error initializing auth state from secure storage:', error);\n            // If there's an error, clear storage and start fresh\n            _lib_utils_secureStorage__WEBPACK_IMPORTED_MODULE_1__.secureStorage.clearAuthStorage();\n        }\n    }\n    return initialState;\n};\n// Create slice\nconst authSlice = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_3__.createSlice)({\n    name: 'auth',\n    initialState: initializeAuthState(),\n    reducers: {\n        resetAuthState: (state)=>{\n            state.isLoading = false;\n            state.error = null;\n        },\n        setCredentials: (state, action)=>{\n            state.user = action.payload.user;\n            state.token = action.payload.token;\n            state.refreshToken = action.payload.refreshToken;\n            state.isAuthenticated = true;\n            state.mfaRequired = false;\n            state.mfaToken = null;\n        },\n        clearCredentials: (state)=>{\n            state.user = null;\n            state.token = null;\n            state.refreshToken = null;\n            state.isAuthenticated = false;\n            state.mfaRequired = false;\n            state.mfaToken = null;\n        },\n        cancelMFA: (state)=>{\n            state.mfaRequired = false;\n            state.mfaToken = null;\n            state.error = null;\n        }\n    },\n    extraReducers: (builder)=>{\n        builder// Login\n        .addCase(login.pending, (state)=>{\n            state.isLoading = true;\n            state.error = null;\n            state.mfaRequired = false;\n            state.mfaToken = null;\n        }).addCase(login.fulfilled, (state, action)=>{\n            state.isLoading = false;\n            // Check if MFA is required\n            if (action.payload.requireMFA) {\n                state.mfaRequired = true;\n                state.mfaToken = action.payload.mfaToken;\n                state.isAuthenticated = false;\n            } else {\n                // Normal login flow\n                state.isAuthenticated = true;\n                state.user = action.payload.user;\n                state.token = action.payload.token;\n                state.refreshToken = action.payload.refreshToken;\n                state.mfaRequired = false;\n                state.mfaToken = null;\n            }\n        }).addCase(login.rejected, (state, action)=>{\n            state.isLoading = false;\n            state.error = action.payload;\n            state.mfaRequired = false;\n            state.mfaToken = null;\n        })// MFA Verification\n        .addCase(verifyMFA.pending, (state)=>{\n            state.isLoading = true;\n            state.error = null;\n        }).addCase(verifyMFA.fulfilled, (state, action)=>{\n            state.isLoading = false;\n            state.isAuthenticated = true;\n            state.user = action.payload.user;\n            state.token = action.payload.token;\n            state.refreshToken = action.payload.refreshToken;\n            state.mfaRequired = false;\n            state.mfaToken = null;\n        }).addCase(verifyMFA.rejected, (state, action)=>{\n            state.isLoading = false;\n            state.error = action.payload;\n        // Keep MFA required state true so user can retry\n        // state.mfaRequired remains true\n        // state.mfaToken remains set\n        })// Register\n        .addCase(register.pending, (state)=>{\n            state.isLoading = true;\n            state.error = null;\n        }).addCase(register.fulfilled, (state, action)=>{\n            state.isLoading = false;\n            state.isAuthenticated = true;\n            state.user = action.payload.user;\n            state.token = action.payload.token;\n            state.refreshToken = action.payload.refreshToken;\n        }).addCase(register.rejected, (state, action)=>{\n            state.isLoading = false;\n            state.error = action.payload;\n        })// Logout\n        .addCase(logout.pending, (state)=>{\n            state.isLoading = true;\n        }).addCase(logout.fulfilled, (state)=>{\n            state.isLoading = false;\n            state.isAuthenticated = false;\n            state.user = null;\n            state.token = null;\n            state.refreshToken = null;\n        }).addCase(logout.rejected, (state, action)=>{\n            state.isLoading = false;\n            state.error = action.payload;\n        })// Refresh token\n        .addCase(refreshAccessToken.pending, (state)=>{\n            state.isLoading = true;\n        }).addCase(refreshAccessToken.fulfilled, (state, action)=>{\n            state.isLoading = false;\n            state.token = action.payload.token;\n            state.refreshToken = action.payload.refreshToken;\n        }).addCase(refreshAccessToken.rejected, (state, action)=>{\n            state.isLoading = false;\n            state.error = action.payload;\n            state.isAuthenticated = false;\n            state.user = null;\n            state.token = null;\n            state.refreshToken = null;\n        });\n    }\n});\n// Export actions\nconst { resetAuthState, setCredentials, clearCredentials } = authSlice.actions;\n// Export selectors\nconst selectCurrentUser = (state)=>{\n    // First try to get from state\n    if (state.auth.user) {\n        return state.auth.user;\n    }\n    // If not in state, try to get from secure storage\n    if (true) {\n        return _lib_utils_secureStorage__WEBPACK_IMPORTED_MODULE_1__.secureStorage.getUserData();\n    }\n    return null;\n};\nconst selectIsAuthenticated = (state)=>{\n    // First check state\n    if (state.auth.isAuthenticated) {\n        return true;\n    }\n    // If not authenticated in state, check secure storage\n    if (true) {\n        return !!_lib_utils_secureStorage__WEBPACK_IMPORTED_MODULE_1__.secureStorage.getAuthTokens();\n    }\n    return false;\n};\nconst selectAuthToken = (state)=>{\n    // First try to get from state\n    if (state.auth.token) {\n        return state.auth.token;\n    }\n    // If not in state, try to get from secure storage\n    if (true) {\n        const tokens = _lib_utils_secureStorage__WEBPACK_IMPORTED_MODULE_1__.secureStorage.getAuthTokens();\n        return (tokens === null || tokens === void 0 ? void 0 : tokens.token) || null;\n    }\n    return null;\n};\nconst selectAuthError = (state)=>state.auth.error;\nconst selectAuthLoading = (state)=>state.auth.isLoading;\n// Export reducer\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (authSlice.reducer);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./src/store/slices/authSlice.js\n"));

/***/ })

});